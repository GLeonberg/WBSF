API

get_companysymbol(var)
	Input: String(CompanyName)
	Output: String(Stock Symbol) "Null if invald"
	Explanation:
		This code takes in a company name and searchs through and xlsx sheet for the company name if the comapny isnt on the list NULL is returned 

makeLineGraph(stockSymbol,Webster,currentInfo)
	Input: String(stockSymbol),DataFrame(Webster),List(currentInfo)
	Output: Void
	Explanation: 
	This takes in webster and currentInfo from two sources and prints them onto a plot in the form of a line graph name by the stockSymbol string

makeCandleStickGraph(stockSymbol,Webster)
	Input: String(stockSymbol),DataFrame(Webster)
	Output: Void
	Explanation:
	This takes in webster from a source and prints them it onto a plot as a candle stick graph with the name of the stockSymbol string

totalTogether(stockSymbol,Webster,currentInfo,Predict,Pointy)
	Input: String(stockSymbol),DataFrame(Webster),List(currentInfo),Array(Predict),integer(Pointy)
	Output: Void
	Explanation:
	This prints two line plots one that mimics makeLineGraph and another that plots the prediciton array points and pointy(our prediciton point) note it calls get index to get the xvalues for the prediciton
	. Also note that this combines four line charts to onto one graph

getIndex(num)
	Input: int(num)
	Output: Array of Timedates(Dates)
	Explanation:
	This gets all the dates from num days ago till now for plotting purposes so that the axis line up

fetchData(stockSymbol,startYear,endYear)
	Input: String(stockSymbol),string(startYear),string(endYear)
	Output: DataFrame(info)
	Explanation:
	This calls yahoo finance api and reterive data from 1-1-startyear to 1-1-endyear

fetchDataToday(stockSymbol,startYear)
	Input: String(stockSymbol),string(startYear),
	Output: DataFrame(info)
	Explanation:
	This calls yahoo finance api and reterive data from 1-1-startyear to current Date

fetchDataSpec(stockSymbol,date)
	Input: String(stockSymbol),Datetime(month)
	Output: DataFrame(info) 
	Explanation:
	This calls yahoo finance api and reterive data from date to current Date

fetchGoogData(stockSymbol)
	Input: String(stockSymbol)
	Output: List(currentInfo)
	Explanation:
	Calls google finance api and retrives a list of today's data

coeffcients_Generator(XMatrix,YMatrix)
	Input: Matrix(XMatrix),Matrix(YMatrix)
	Output: Matrix(Final)
	Explanation:
	This take two matricies and applies the LSA alogrithim to generate a 10 by 1 matrix of coeffcients for functions

differenceBetweenDataPoints(Pulled_Data,Generated_Data,Current_Data)
	Input: DataFrame(Pulled_Data),Array(Generated_Data),List(Current_Data)
	Output: Array(normalized points)
	Explanation:
	This takes all the values in the predicted array and calculates the differences and then it adds them to the actual data(Pulled_Data) to normalize the delta so that when plotted it is valid

makeOutY(FinalM,xVals,startYear,yVals,currentData)
	Input: Matrix(FinalM),String(startYear),Array(yVals),List(Current_Data)
	Output: Array(Generated_Data)
	Explanation:
	This plugs in x values corresponding to the days that are taken from the pulled data as to gather the predicted data. We calcualte these x values by using setAxis to find out how many days there are between are iniatal date and now. This then uses the coeffcients to generate an array of y value which are then
	sent to differenceBetweenDataPoints() to get normalized data that is ready for plotting

setAxis(startYear)
	Input: String(startYear)
	Output: int(DaysSoFar)
	Explanation:
	Calualtes and returns how many days there are between the begging of startYear to now

getPointY(FinalM,date,prev)
	Input: Matrix(FinalM),String(startYear),int(PreviousDaysData)
	Output: int(predicted point)
	Explanation:
	This is a smaller version of makeOutY(). It finds one data point given the date of the predction and the previous data points value (for normalization).

currentDayCount()
	Input: Void
	Output: Void
	Explanation:
	Finds how many days are in all the months leading up to the current one

makeY_Matrix(yVals)
	Input: Array/DataFrame(yVals)
	Output: Matrix(YMatrix) which is length of yVals x 1
	Explanation:
	This is needed for the LSA Method it makes an array into a length(yVals) x 1 matrix for computation purposes

makeXVals_Matrix(percision,startYear,DataSet)
	Input:int(percision),string(startYear),Array/DataFrame(DataSeta)
	Output: Matrix(Xmatrix) that is length of xVals by percision+1
	Explanation:
	This cacluate the Xmatrix need to preform the LSA Method note that this creates a matrix as desribed in the documentation in report

CalculateACC()	
	Input:
	Output:
	Explanation:
